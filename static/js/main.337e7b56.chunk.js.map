{"version":3,"sources":["components/Square.js","components/Gameboard.js","components/Histroy.js","components/Statusmessage.js","App.js","helper.js","reportWebVitals.js","index.js"],"names":["Square","value","update","children","iswinningsquare","type","className","onClick","Gameboard","gameboard","handleclick","winningsquares","rendersquare","position","includes","Histroy","history","moveto","currentmove","map","_","index","Statusmessage","winner","current","nomovesleft","every","el","zero","App","newgame","Array","fill","useState","sethistory","setcurrentmove","squares","lines","i","length","a","b","c","calculateWinner","console","log","previous","last","newboard","square","pos","concat","style","fontWeight","move","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.337e7b56.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Square({ value, children, update, iswinningsquare}) { //the children tag is use when the component is taking another info from gameboard like p tag and to have that tag from gameboard in square we will use children tag\n  return (\n    <button type=\"button\" className={`square ${iswinningsquare ? 'winning': '' } ${value === 'X'? 'text-green': 'text-orange'}`}  onClick={update}>{value}</button>\n\n  )\n}\n\nexport default Square\n","import Square from './Square'\n\nfunction Gameboard({gameboard,handleclick,winningsquares}) {\n\n    const rendersquare = (position) => {\n        const iswinningsquare = winningsquares.includes(position)\n        return <Square value={gameboard[position]} update={() => { handleclick(position)}} iswinningsquare={iswinningsquare} />  \n        /* if we directly put the function while using props it will immediately execute for that use arrow function \n        like this so that it works proper*/\n    }\n    return (\n        <div className=\"board\">\n            <div className=\"board-rows\">\n                {rendersquare(0)}\n                {rendersquare(1)}\n                {rendersquare(2)}\n            </div>\n            <div className=\"board-rows\">\n                {rendersquare(3)}\n                {rendersquare(4)}\n                {rendersquare(5)}\n            </div>\n            <div className=\"board-rows\">\n                {rendersquare(6)}\n                {rendersquare(7)}\n                {rendersquare(8)}\n            </div>\n        </div>\n    )\n}\n\nexport default Gameboard;\n\n","import React from 'react'\n\nconst Histroy = ({ history , moveto, currentmove}) => {\n    return (\n        <div className=\"history-wrapper\">\n        <ul className=\"history\">\n            {\n                history.map((_,index) => {\n                    return (\n                        <li key={index}> {/* unique key for array */}\n                            <button className={`btn-move ${index===currentmove ? 'active':''}`} type=\"button\" onClick={()=>{moveto(index)}}>{ index === 0?\"go to game to start\":`go to move #${index}` }</button>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n        </div>\n    )\n}\n\nexport default Histroy\n","import React from 'react'\n\nconst Statusmessage = ({winner,current}) => {\n//   const message = winner ? `Winner is ${winner}` : `Next Player turn ${current.zero ? 'X' : '0'}`\n//   console.log(winner)\nconst nomovesleft = current.gameboard.every((el)=>el !==null)\n    return (\n        <div className=\"status-message\">\n          { winner && \n          <>\n          Winner is <span className={winner === 'X'? 'text-green':'text-orange'}>{winner}</span>  {/* 1st condition if we get the winner it will display it */}\n          </>\n        }  \n          { !winner && !nomovesleft && \n          <>\n          Next Player turn <span className={current.zero ? 'text-green':'text-orange'}>{current.zero ? 'X' : '0'}{' '}</span>\n          </>\n          } {/* 2nd condition is to have the turn of users x and 0 */}\n          { !winner && nomovesleft && <>\n          <span className=\"text-green\">X</span>and <span className=\"text-orange\">0 </span>Tied\n          </>} {/* 3rd condition if we didnt get the winner then it show tied*/}\n        </div>\n    )\n}\n\nexport default Statusmessage\n","import './App.css';\nimport Gameboard from './components/Gameboard';\nimport { useState } from 'react';\nimport './STYLES/Global.scss'\nimport Histroy from './components/Histroy';\nimport { calculateWinner } from './helper';\nimport Statusmessage from './components/Statusmessage';\nfunction App() {\n\n\n\n  // first use this two logic and then go ahead \n  // const [gameboard, setgameboard] = useState(Array(9).fill(null))\n  // const [zero, setzero] = useState(false) \n  \n  const newgame = [\n    {  //creating array objects\n      gameboard: Array(9).fill(null),\n      zero: true\n    }\n  ]\n\n  // after using the first logic slightly change logic for history process\n  const [history, sethistory] = useState(\n    [\n      {  //creating array objects\n        gameboard: Array(9).fill(null),\n        zero: true\n      }\n    ]\n  )\n\n\n  const [currentmove, setcurrentmove] = useState(0)\n  const current = history[currentmove]   //state of the game\n  const {winner, winningsquares} = calculateWinner(current.gameboard)\n  console.log(current.gameboard)\n\n\n\n  const handleclick = (position) => {\n\n    if (current.gameboard[position] || winner) {  \n    //if board position exist then return this code is written because it will dont allow to overwrite on it\n      return;\n    }\n    // setgameboard((previous) => {  previously it was this \n    sethistory((previous) => {\n      const last = previous[previous.length - 1] \n      //it will give last element in this previous array\n\n\n\n      // return previous.map((square, pos) => {  //it was this before mapping the previous value\n      const newboard = last.gameboard.map((square, pos) => {\n        if (pos === position)   \n        //map has its own index value so that it can compare index value with position of square\n        {\n          // return current.zero ? 'X' : '0' it is giving the x and 0 in the previous solution previously it was state \n          return last.zero ? 'X' : '0'   \n          //but now it is state array object\n        }\n        return square    \n        //returning the values\n      })\n      return previous.concat({gameboard: newboard, zero:!last.zero}) //changing the zero boolean value\n    })\n    // setzero((previous) => !previous) //this statement will make true for zero and then again false\n    setcurrentmove(previous=>previous+1)\n  }\nconst Reset = ()=>{\n  sethistory(newgame)\n  setcurrentmove(0)\n}\n  const moveto = (move) =>{\n    setcurrentmove(move);\n  }\n  return (\n    <div className=\"container\">\n      <h1>TIC <span className=\"text-green\">TOE</span> GAME</h1>\n      <Statusmessage winner={winner} current={current}/>\n      <Gameboard gameboard={current.gameboard} handleclick={handleclick} winningsquares={winningsquares}/>\n      <button type=\"button\" onClick={Reset} className={`btn-reset ${winner ? 'active': ''}`}>START NEW GAME</button>\n      <h2  style={{fontWeight: 'normal'}}>CURRENT GAME HISTORY</h2>\n      <Histroy history={history} moveto={moveto} currentmove={currentmove}/>\n      <div className=\"bg-balls\"/>\n    </div>\n  );\n}\nexport default App;\n\n","export function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],//0\n      [3, 4, 5],//1\n      [6, 7, 8],//2\n      [0, 3, 6],//3\n      [1, 4, 7],//4\n      [2, 5, 8],//5\n      [0, 4, 8],//6\n      [2, 4, 6],//7\n    ];\n    for (let i = 0; i < lines.length; i++) { //0;0<8;1\n      const [a, b, c] = lines[i];//0\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { \n        // return squares[a];\n        return {\n          winner: squares[a],\n          winningsquares : [a,b,c]\n        }\n      }\n    }\n    return {\n      winner: null,\n      winningsquares : []\n    }\n}\n  //0 && 0 === 1 && 0 === 2\n  //3 && 3 === 4 && ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}